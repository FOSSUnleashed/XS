The eXtensible Shell (xs)

rc (Plan9) => es => xs

Both ancestors are still present, but
not actively maintained.

Xs development inactive since 2015.
Still packaged in Fedora (F20).

Released version (xs 1.0) has serious
flaws in implementation and man page.

Language has Lisp-ish semantics with
infix syntax.

Example: This presentation is run by:

@less plz

Lists, function parameters, closures,
exceptions, lexical bindings, lambdas

However: closure returned from function
does not work (no upward funargs). :(

But you can still instantiate functions
(including closed-over functions) from
a function:

@less obj-example.xs

You can also do something akin to Lisp
macros:

@less -f <{xs -v macro-example.xs >[2=1]}

Above the interpreter and platform
API, much of xs is written in xs.

@less ../initial.xs

Two-stage compile-/link-time bootstrap.

@touch ../dump.cxx ../initial.xs
@cd .. && ./build.sh

Many primitives can be replaced by
user-defined functions written in xs.

REPL is written in xs and can be
replaced by user.

Command-line editing and history is
provided by GNU readline.

Improved over v1.0:
  - added modulus (%) operator
  - added relational operators
  - added builtin printf
  - added Unicode character escapes
  - added $&random primitive
  - corrected pushd/popd behavior
  - added dirs command
  - added rudimentary jobs command
  - added history command
  - tab completion of function names
  - tab completion of variable names
  - added SIGWINCH handler
  - control sequences in $prompt w/o
    $&promptignore and $&nopromptignore
  - many man page corrections
  - many bug fixes
  - expanded test suite

Changes:
  - Replace autotools with Meson/Ninja
  - Moving toward POSIX-only support

Deficits:
  - no job control (^Z, fg, bg, disown)
  - weak/incomplete tests
  - size (3+ MB?!) [blame Boost?]
  - ...

Repo:
  https://github.com/TieDyedDevil/XS
  (branch: cleanup-2)

My .xsrc:
  https://github.com/TieDyedDevil/Fi3/\
blob/master/files/_xsrc

Requirements: C++, Meson/Ninja, bison,
libgc, libffi, libreadline, libboost*
