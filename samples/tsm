#! /usr/local/bin/xs --

#: terminal session manager

# NOTE: This script is translated from a POSIX shell script.
# There are obvious opportunities for factoring and cleanup.

PGM = $0; PGM = `{basename $PGM}
ARGS = $*
VALID = '[]\\[^_[:alpha:]]'
DIGITS = '^[[:digit:]]\+$'

fn @usage {|*|
	if {{!~ $#* 0} && {!~ $* help}} {
		echo $PGM: $*
		echo
	}
	cat <<EOF
usage: $PGM [-e CHAR] [-m CHAR] [-s NUM] [-D WORK_DIR] \
            -c|-n SESSION_NAME [COMMAND ...]
       $PGM [-e CHAR] -a SESSION_NAME
       $PGM -q SESSION_NAME
       $PGM -l|-L|-i|-h
EOF
	if {~ $* help} {
		cat <<EOF

    -D WORK_DIR: set initial working directory for session
    -e CHAR: abduco detach control key (default \ or $$TSM_DET)
    -m CHAR: dvtm Mod control key (default s or $$TSM_MOD)
    -s NUM: set scrollback length (default 1000 or $$TSM_SCROLL)
    -c: create and attach
    -n: create but do not attach
    -a: attach
    -l: list sessions by attach time
    -L: list sessions by name
    -i: attach interactively
    -q SESSION_NAME: query; return true if session exists
    -h: help

Create or attach to a terminal session using abduco(1) and dvtm(1).
Each command opens in a separate window, assuming that the command
waits for input.

The scrollback length must be at least 500 and less than 100,000.

CHAR is in the set ]\[^_a-zA-Z . Beware quoting and other bindings
when selecting CHAR; $PGM will not deter you from making ill-advised
selections for the CHAR options.

A SESSION_NAME must begin with a letter or digit and contain only
letters, digits, underscores, hyphens and periods.

The dvtm status line displays:
    [  day date time user hostname init-wd session].

The session's initial working directory is stored in $$TSMWD.

The session list shows creation time, session flag, session name, Mod
key, detach key, scrollback length and initial working directory.
The session flag is * for an active and + for a terminated session.
EOF
	}
	exit 0
}

!~ $#ARGS 0 || @usage

fn @one_op {
	~ $FLAG () || {@usage 'only one of -c -n -a -l -L -i -q'}
}

fn @optreq {|opt val|
	~ $val _ && {@usage 'option '^$opt^' needs a value'}
}

WDIR =
DET =
MOD =
SCROLL =
FLAG =
SESSION =
DET_OVERRIDE = false
catch {|e| echo $e(3 ...); @usage} {
ARGS = <={%parse-args <={%args $ARGS} \& (
	-D {@optreq $optopt $optval; WDIR = $optval}
	-e {@optreq $optopt $optval; DET = \^^$optval; DET_OVERRIDE = true}
	-m {@optreq $optopt $optval; MOD = \^^$optval}
	-s {@optreq $optopt $optval; SCROLL = $optval}
	-c {@optreq $optopt $optval; @one_op; FLAG = $optopt; SESSION = $optval}
	-n {@optreq $optopt $optval; @one_op; FLAG = $optopt; SESSION = $optval}
	-a {@optreq $optopt $optval; @one_op; FLAG = $optopt; SESSION = $optval}
	-q {@optreq $optopt $optval; @one_op; FLAG = $optopt; SESSION = $optval}
	-l {@one_op; FLAG = $optopt}
	-L {@one_op; FLAG = $optopt}
	-i {@one_op; FLAG = $optopt}
	-h {@usage help >[2]/dev/null|less -FX}
)}
}

fn @substring {|*|
	let (s = $*(1); b = $*(2); e = $*(3)) {
		if {!~ $e ()} {
			echo $s|awk '{ print substr($0, ' \
				^`($b+1)^', '^$e^'); }'
		} else {
			echo $s|awk '{ print substr($0, ' \
				^`($b+1)^'); }'
		}
	}
}

{!~ $FLAG -c} && {!~ $FLAG -n} && {!~ $#ARGS 0} && {@usage extra parameter}
{~ $FLAG -l} || {~ $FLAG -L} || {~ $FLAG -i} || {~ $FLAG -q} && \
	{!~ $DET$MOD$WDIR$SCROLL ()} && {@usage disallowed option}
{~ $FLAG -a} && {!~ $MOD$WDIR$SCROLL ()} && {@usage disallowed option}
{!~ $SESSION ()} && {echo $SESSION|grep -qv '^[a-zA-Z0-9][a-zA-Z0-9._-]*$'} && \
	{@usage invalid session name}

fn @fail {|*|
	echo $PGM: $*
	exit 1
}

fn @clean {
	for f `{ls $HOME/.abduco/* >[2]/dev/null} {
		unmatched = true
		escape {|fn-break| for s `{lsof -a -c abduco -u $USER -U -Fn \
				|grep -v -e \^p -e \^f|cut -d' ' -f1|cut -c2-} {
			~ $s $f && {unmatched = false; break}
		}}
		{result $unmatched} && {rm $f}
	}
	fork {
		cd $HOME/.abduco
		for f `{ls -A >[2]/dev/null} {
			{~ `{@substring $f 0 1} .} \
					&& {!access -s `{@substring $f 1}} && {
				unwind-protect {
					. ./$f
					rm -f $_X $_Y $_Z
				} {
					rm $f
				}
			}
		}
	} >[2]/dev/null
}

fn @prevent_nesting {
	THIS = $pid
	while {!~ $THIS 1} {
		PARENT = `{ps -ho ppid -p $THIS}
		COMMAND = `{ps -ho comm -p $PARENT}
		{~ $COMMAND abduco} && {@fail no session nesting}
		THIS = $PARENT
	}
}

fn @badenv {|*|
	let (s = `{printf 'Invalid environment: %s' `` \n {var $*}}) {
		@fail $s
	}
}

fn @defaults {
	if {!~ $TSM_DET ()} {
		~ $TSM_DET $VALID || @badenv TSM_DET
		TSM_DET = \^^$TSM_DET
	}
	(DET _) = ($DET $TSM_DET \^\\)
	echo `{@substring $DET 1}|grep -q $VALID || @usage CHAR not in allowed set
	if {!~ $TSM_MOD ()} {
		~ $TSM_MOD $VALID || @badenv TSM_MOD
		TSM_MOD = \^^$TSM_MOD
	}
	(MOD _) = ($MOD $TSM_MOD \^s)
	echo `{@substring $MOD 1}|grep -q $VALID || @usage CHAR not in allowed set
	if {!~ $TSM_SCROLL ()} {
		{echo $TSM_SCROLL|grep -q $DIGITS} || @badenv TSM_SCROLL
	}
	(SCROLL _) = ($SCROLL $TSM_SCROLL 1000)
	{echo $SCROLL|grep -q $DIGITS} || @usage NUM not valid
	{$SCROLL :ge 500} && {$SCROLL :lt 100000} || @usage SCROLL out of range
	!~ $SESSION () || @usage SESSION name required
	{!~ $WDIR ()} && {
		access -d $WDIR || @fail $WDIR not a directory
	}
}

fn @write_metadata {
	{
	echo '_1 = '$DISPLAY_TSMWD
	echo '_2 = '`{echo $MOD|sed 's/\\/\\\\/'|sed 's/\^/\\^/'}
	echo '_3 = '$SCROLL
	echo '_4 = '`{echo $DET|sed 's/\\/\\\\/'|sed 's/\^/\\^/'}
	echo '_X = '$DVTM_STATUS_UPDATER
	echo '_Y = '$S_FIFO
	echo '_Z = '$C_FIFO
	} > $HOME/.abduco/.^$SESSION^@`{hostname -s}
}

fn @update_metadata {
	f = $HOME/.abduco/.^$SESSION^@`{hostname -s}
	{access -- $f} && {
		if {result $DET_OVERRIDE} {ed -s $f << EOF
4d
a
_4=$DET
.
wq
EOF
			. $f
			DET = $_4
			true
		} else {DET = \^\\}
	}
}

fn @check_cmds {|*|
	for c $* {
		{access -d $c} && {@fail $c is a directory}
	}
}

fn @session_exists {
	result <={access -s $HOME/.abduco/^$SESSION^@^`{hostname -s}}
}

fn @rewrite_abduco_message {|*|
	sed 's/^abduco/tsm/'
}

fn @stop_status_updater {
	pkill -f '.*xs '^$DVTM_STATUS_UPDATER
}

fn @restart_status_updater {
	. $HOME/.abduco/.^$SESSION^@`{hostname -s}
	DVTM_STATUS_UPDATER = $_X
	(_1 _2 _3 _4 _X _Y _Z) =
	setsid >/dev/null >[2=1] xs $DVTM_STATUS_UPDATER &
}

fn @make_session {|*|
	{~ $FLAG -c} && @prevent_nesting
	{result <=@session_exists} && {@fail $SESSION exists}
	@check_cmds $*
	@clean
	@defaults
	S_FIFO = /tmp/^$PGM^-s.^$pid
	C_FIFO = /tmp/^$PGM^-c.^$pid
	mkfifo -m 600 $S_FIFO
	mkfifo -m 600 $C_FIFO
	let ((d _) = ($WDIR `pwd)) {
		TSMWD = `{cd $d; pwd}
	}
	DISPLAY_TSMWD = `{echo $TSMWD|sed 's|'$HOME'|\\~|'}
	DISPLAY_TSMWD = `{echo $DISPLAY_TSMWD|sed 's| |\\\\ |'}
	cd $TSMWD
	ABDUCO_CMD =
	DVTM_STATUS_UPDATER = `mktemp
	cat >$DVTM_STATUS_UPDATER <<EOF
#! /usr/bin/env xs

while true {
	stamp = `{date +%a\ %F\ %R:%S}
	host = `{hostname -s}
	echo $$stamp $USER $$host $DISPLAY_TSMWD $SESSION >> $S_FIFO
	sleep 1
}
EOF
	setsid >/dev/null >[2=1] xs $DVTM_STATUS_UPDATER &
	@write_metadata
	abduco -e $DET $FLAG $SESSION \
		dvtm -M -c $C_FIFO -s $S_FIFO -m $MOD -h $SCROLL $* \
		|[2] @rewrite_abduco_message
	@stop_status_updater
	tput cnorm
}

fn @attach_session {
	@prevent_nesting
	@clean
	{result <=@session_exists} || @fail $SESSION does not exist
	@update_metadata
	@restart_status_updater
	abduco -e $DET -a $SESSION |[3] @rewrite_abduco_message
	@stop_status_updater
	tput cnorm
}

fn @interactive {
	if {!ls $HOME/.abduco/* >/dev/null >[2=1]} {
		echo No sessions
	} else {
		%list-menu '' {|*| SESSION = $*; @attach_session} `{
			for f $HOME/.abduco/* {
				(f _) = <={~~ $f *@*}
				f = `{basename $f}
				echo $f
			}
		}
	}
}

fn @session_flag {|*|
	abduco >[2]/dev/null|tail -n+2|cut -f1,4|cut -c1,7-| \
		grep -w $^*|cut -c1
}

fn @list_sessions {|*|
	@clean
	w1 = 0
	%with-read-lines <{ls -ltu --time-style='+%b %d %H:%M' $HOME/.abduco \
			|tail -n+2 |cut -d' ' -f6-} \
	{|SESS|
		(_ _ _ s h) = <={~~ $SESS *\ *\ *\ *@*}
		p = $s^@^$h
		w = <={$&len $s}
		{$w :gt $w1} && {w1 = $w}
	}
	if {$w1 :gt 0} {
		{$w1 :lt 4} && {w1 = 4}
		printf 'Created-at   F Name%'^`($w1-2)^'s' \
			^'Mod Det Scroll Initial-wdir'\n ' '
		%with-read-lines <{ls -lt --time-style='+%b %d %H:%M' \
				$HOME/.abduco|tail -n+2 |cut -d' ' -f6-|$*} \
		{|SESS|
			(d1 d2 d3 s _) = <={~~ $SESS *\ *\ *\ *@*}
			p = $d1 $d2 $d3 $s
			flag = <={%argify `{@session_flag $s}}
			~ $flag '' && flag = ' '
			printf '%3s %2s %5s '^$flag^' '^`.as^'%s'^`.an $p
			(_ _ _ s h) = <={~~ $SESS *\ *\ *\ *@*}
			ss = $s^@^$h
			f = $HOME/.abduco/.^$ss
			if {access -- $f} {
				lp = <={$&len $^s}
				printf %^`($w1+2-$lp)^s ' '
				. $f
				printf '%2s  %2s   %5d %s'\n $_2 $_4 $_3 $_1
				true
			} else {echo}
		}
	} else {
		echo 'No sessions'
	}
}

fn @query {
	if @session_exists {exit 0} else {exit 1}
}

{access -d -- $HOME/.abduco} || {mkdir -m 700 $HOME/.abduco}

switch $FLAG (
	-c {@make_session $ARGS}
	-n {@make_session $ARGS}
	-a {@attach_session}
	-l {@list_sessions cat}
	-L {@list_sessions sort -k4}
	-i {@interactive}
	-q {@query}
	{@usage}
)
