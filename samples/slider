#! /usr/local/bin/xs --

pgm = $0
file = $1
start = $2; ~ $start () && start = 1

~ $1 --help && {
	name = `{basename $pgm}
	less -RFXi <<EOF
usage: $name FILE [START_PAGE]

Present textual slides with markup.

A markup request begins each line of FILE:
  .h Header text (one line)
  .s Subheader text (one line)
  .f Footer text (one line)
  .i Indent amount (number of leading blanks)
  .j Subsequent indent amount (additional leading blanks on subsequent lines)
  .w Line width (includes indents; 0 to use terminal width)
  .p Paragraph (fill, wrap) text
  .c Continued text (follows previous word with no intervening space)
  .pb Styled paragraph text (bold)
  .pd Styled paragraph text (dim)
  .ph Styled paragraph text (highlight)
  .pi Styled paragraph text (italic)
  .pu Styled paragraph text (underline)
  .pR Colored paragraph text (red)
  .pG Colored paragraph text (green)
  .pY Colored paragraph text (yellow)
  .pB Colored paragraph text (blue)
  .pM Colored paragraph text (magenta)
  .pC Colored paragraph text (cyan)
  .b Block (literal, nowrap) text
  . Terminate a paragraph or block (text ignored)
  .v Vertical space amount (number of lines)
  .^ Show slide; pause for key

  Markup requests must begin in the first column.
  Text unrecognized as a request is silently ignored.
  The .h, .s, .f, .i, .j and .w requests remain as set until changed.
  Yes, there is no way to combine attributes and colors.

Navigation keys
  next slide:     n f j h <tab> <space>     <enter>
  previous slide: p b k l `     <backspace> <delete>
  redraw:         r
  exit:           q .
EOF
	exit 1
}

~ $#* 0 && throw error `{basename $pgm} 'FILE [START_PAGE] | --help'

let (header; subheader; footer; rows; rc; width = `{tput cols}; \
		 pn = 1; indent = ''; sindent = ''; text = '') {

	fn indent {|n|
		~ $n () && n = 0
		result <={%argify `` '' {for i `{seq $n} {printf ' '}}}
	}

	fn style {|style text|
		result $style^$text^<=.%an
	}

	fn color {|n text|
		result <={.%af $n}^$text^<={.%af 7}
	}

	fn fill {|t|
		printf $indent
		let (wl = <={%split ' ' $t}; wc; \
				cw = <={$&wid $indent}) {
			for w $wl {
				# This catch is here because of an xs bug.
				wc = <={catch {
					result 1
				} {
					result <={$&wid `` '' {printf %s $w \
								|%strip-csi}}}}
				if {`($wc+$cw) :ge $width} {
					printf \n%s $indent^$sindent
					cw = <={$&wid $indent^$sindent}
					rc = `($rc+1)
				}
				printf '%s ' $w
				cw = `($cw+$wc+1)
			}
		}
		printf \n\n
		rc = `($rc+2)
	}

	fn spacedown {|n|
		~ $n () && n = 0
		for _ `{seq $n} {printf \n; rc = `($rc+1)}
	}

	fn render {|pars|
		let (pt = <={%split \n $pars}; ob = false) {
			for t $pt {
				let ((w1 lr) = <={~~ $t *\ *}) {
					if {~ $w1 .b} {
						ob = true
						printf '%s%s'\n $indent $lr
						rc = `($rc+1)
					} else if {~ $w1 .i} {
						indent = <={indent $lr}
					} else if {~ $w1 .j} {
						sindent = <={indent $lr}
					} else if {~ $w1 .v} {
						spacedown $lr
					} else if {~ $w1 .w} {
						width = $lr
						~ $width 0 && \
							width = `{tput cols}
					} else {
						if $ob {
							printf \n
							rc = `($rc+1)
							ob = false
						}
						fill $t
					}
				}
			}
		}
	}

	fn redraw {|page|
		indent = ''
		text = ''
		width = `{tput cols}
		exec $pgm $file $page
	}

	fn waitkey {
		let (kc) {escape {|fn-done| {while (true) {
			kc = <={%without-echo %read-char}
			if {~ $kc \b \x7f p b k l \`} {redraw `($pn-1)}
			if {~ $kc r} {redraw $pn}
			if {~ $kc ' ' \n n f j h \t} {done}
			if {~ $kc q .} {exit}
		}}}}
	}

	fn showpage {
		rows = `{tput lines}
		clear
		printf %s%s%s\n <=.%ab <={%argify $header} <=.%an
		printf %s%s%s\n <=.%ai <={%argify $subheader} <=.%an
		printf \n
		rc = 5
		render $text
		while {$rc :lt $rows} {
			printf \n
			rc = `($rc+1)
		}
		printf '%s[%3d] %s%s'\n <=.%ad $pn <={%argify $footer} <=.%an
		waitkey
		pn = `($pn+1)
		text = ''
	}

	%without-cursor %with-read-lines $file {|line|
		let ((w1 lr) = <={~~ $line *\ * *}) {
			switch $w1 (
			'.h' {header = $lr}
			'.s' {subheader = $lr}
			'.f' {footer = $lr}
			'.i' {text = $text^\n.i' '^<={%argify $lr}^\n}
			'.j' {text = $text^\n.j' '^<={%argify $lr}^\n}
			'.w' {text = $text^\n.w' '^<={%argify $lr}^\n}
			'.p' {text = $text^' '^$lr}
			'.c' {text = $text^$lr}
			'.pb' {text = $text^' '^<={style <=.%ab $lr}}
			'.pd' {text = $text^' '^<={style <=.%ad $lr}}
			'.ph' {text = $text^' '^<={style <=.%ah $lr}}
			'.pi' {text = $text^' '^<={style <=.%ai $lr}}
			'.pu' {text = $text^' '^<={style <=.%au $lr}}
			'.pR' {text = $text^' '^<={color 1 $lr}}
			'.pG' {text = $text^' '^<={color 2 $lr}}
			'.pY' {text = $text^' '^<={color 3 $lr}}
			'.pB' {text = $text^' '^<={color 4 $lr}}
			'.pM' {text = $text^' '^<={color 5 $lr}}
			'.pC' {text = $text^' '^<={color 6 $lr}}
			'.b' {text = $text^\n.b' '^$lr\n}
			'.v' {text = $text^\n.v' '^<={%argify $lr}^\n}
			'.^' {if {$start :gt $pn} {
					text = ''
					pn = `($pn+1)
				} else {
					showpage
				}}
			'.' {text = $text^\n}
			{}
			)
		}
	}
}
