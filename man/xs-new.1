.TH XS 1 "2017 - v1.1"
.SH NAME
xs \- extensible shell
.SH SYNOPSIS
.RI "xs [-c " command "] [-silevxnpod] [" file " [" arguments ]
.SH DESCRIPTION
.B Xs
is a command interpreter for Linux.
.B Xs
allows programming in a functional style and has a simple, consistent syntax.
.B Xs
also provides a set of hooks which allow for customization of the semantics
of many operations. Furthermore, an
.B xs
program is able to generate
.B xs
code; this facilitates the creation of new language constructs.
.PP
.B Xs
is a descendant of
.BR rc "(1) and " es (1);
the three implementations are not interoperable.
.SH OPTIONS
.RS
.TP
.BI -c " command"
Execute the
.IR command .
.TP
.B -s
Read commands from standard input; pass the first argument to
.B xs
rather than taking the argument as the name of a file to source.
.TP
.B -i
Force
.B xs
to be an interactive shell even if commands do not come from standard input
via a terminal.
.TP
.B -l
Cause
.B xs
to be a login shell, as if it had been invoked as
.BR -xs .
.TP
.B -e
Exit if any command (apart from those appearing as tests in conditional forms
or as arguments to logical operators) returns a false status.
.TP
.B -v
Echo input to standard error.
.TP
.B -x
Print commands to standard error.
.TP
.B -n
Disable command execution.
.TP
.B -p
Don't initialize functions from the environment.
.TP
.B -o
If any of file descriptors 0, 1 or 2 are inherited closed, leave them closed
rather than open on /dev/null.
.TP
.B -d
Don't trap SIGQUIT or SIGTERM.
.RE
.SH LANGUAGE
Lexically, an
.B xs
program consists of words and punctuation.
.SS Words
In its simplest form, a word is a
sequence of non-special characters. The special characters are:
.PP
.RS
.B "# $ & ' ( ) ; < > \e ^ ` { | }"
.I "space tab newline"
.RE
.PP
A special character may escaped by preceeding it with a backslash
.RB ( \e );
this removes the character's special meaning.
.PP
Other escapes denote control characters:
.PP
.RS
.TP
.B \ea
alert (bell)
.TP
.B \eb
backspace
.TP
.B \ee
escape
.TP
.B \ef
form feed
.TP
.B \en
newline
.TP
.B \er
carriage return
.TP
.B \et
tab
.RE
.PP
A character octet may be denoted by its hexadecimal or octal code point:
.PP
.RS
.TP
.BI \ex nn
character octet
.IR nn ,
for
.I n
in {0..0, a..f, A..F}
.TP
.BI \e mnn
character octet
.IR mnn ,
for
.I m
in {0..3} and
.I n
in {0..7}
.RE
.PP
A UTF-8 octet sequence may be denoted using one of the escape sequences:
.RS
.TP
.BI \eu nnnn
UTF-8 character having codepoint
.IR nnnn ,
for
.I n
in {0..9, a..f, A-F}
.TP
.BI \eU nnnnnnnn
UTF-8 character having codepoint
.IR nnnn ,
for
.I n
in {0..9, a..f, A-F}
.RE
.PP
.B Xs
does not allow scripts to contain a NUL character; thus the
following are all invalid:
.PP
.RS
.BR \e000 ", " \ex00 ", " \eu0000 " and " \eU00000000 .
.RE
.PP
A backslash must not be followed by a sequence of characters other than as
described above.
.PP
A sequence of characters enclosed by apostrophes
.RB ( ' )
is a word; the bounding
.B '
are not part of the word. We refer to this form as a
.IR "quoted word" .
.PP
An apostrophe is written within a quoted word by doubling it, e.g.:
.PP
.RS
.B 'Sam''s word'
.RE
.PP
All other special characters lose their meaning within a quoted word.
.PP
The empty word is denoted by
.BR '' .
.PP
Words are indivisible and immutable.
.SS Commands
A command is a sequence of words separated by whitespace. The first word
is always the name of an executable program on
.BR $path ,
an
.B xs
function, or a lambda (defined below). Subsequent words are arguments; these
are subject to evaluation, expansion and substitution. Because the arguments
are passed as a list, any argument that yields
.B ()
will "disappear" (see Lists).
.SS Command separator
A command must occupy one logical line. Commands are separated by
newlines or semicolons
.RB ( ; ).
.SS Program fragments
A program fragment (henceforth fragment) is a sequence of zero or more
commands enclosed in braces:
.PP
.RS
.BI { command* }
.RE
.PP
A fragment may span multiple physical lines.
.PP
The value of a fragment is the result code returned by the last
command executed. An empty fragment
.RB ( {} )
has a result of zero. A fragment containing a pipeline returns a list of
results: one for each function or executable in the pipeline.
.PP
A fragment appearing as a parameter of a function or executable is
treated as a single word. Fragments are indivisible and immutable.
.PP
The braces may be elided if the command is a single word having no arguments.
.SS Comments
The hash mark
.RB ( # )
introduces a comment which ends at newline.
.SS Line continuation
Program text may be split across physical lines by ending each logical line
with a backslash
.RB ( \e ).
The backslash and the immediately following newline are read as a space.
.SS Lists
A list is a space-separated sequence of words. The empty list is denoted by
.BR () .
All lists are flat in
.BR xs ;
balanced parentheses may be written for grouping, but they do not create
a tree. Thus
.PP
.RS
.B this is a list of seven words
.RE
.PP
and
.PP
.RS
.B this (is a list) ((of) () (seven words)) ()
.RE
.PP
are identical.
.PP
A list enclosed in parentheses may span multiple line without need of
line continuation characters.
.SS Concatenation
Lists may be joined using the concatenation operator, caret
.BR ( ^ ).
.PP
A list of length one is a word. Concatenating two words creates a new word.
.PP
When either list has length greater than one, the result of concatenation is
the cross product of the lists.
.PP
When either list is empty, the result of concatenation is the empty list.
.SS Variable names
Letters, digits all UTF-8 characters encoded as at least two octets (i.e.:
code points greater than \u007f) and the characters percent
.RB ( % ),
star
.RB ( * ),
hyphen
.RB ( - )
and underscore
.RB ( _ )
may be used in variable names. These character may appear in any order or
combination.
.PP
The
.B xs
special characters (see Words) may also appear in a variable name if
quoted or escaped. Likewise, character escapes (octal, hex and Unicode) may
be part of a variable name.
.PP
Variable names having the prefix
.B fn-
or
.B var-
have special meaning; see Functions and Settors, respectively.
.SS Assignment
A variable is assigned a list value using the notation
.PP
.RS
.IB var " = " list
.RE
.PP
The spaces around
.B =
are mandatory.
.PP
A variable is undefined by assigning an empty list as its value. While
.PP
.RS
.IB var " = " ()
.RE
.PP
is valid, the preferred form is
.PP
.RS
.IB var " ="
.RE
.PP
The value of an assignment is its assigned value.
.SS Variables
All variables are exported to the environment unless declared within a
.BR local " or " let " form (described below)."
.PP
A variable's value is retrieved by writing
.B $
before its name, like
.BI $ var
.RI .
.PP
An undefined variable yields the empty list when referenced.
.PP
A variable name may be constructed at runtime. Parentheses must enclose
multiple operators used to construct a name.
.SS Subscripted reference
Specific list elements may be selected via subscripting. This takes the form
.PP
.RS
.BI $ var ( subscripts )
.RE
.PP
List elements are indexed starting at 1. A subscript less than 1 is an error.
A subscript greater than the number of list elements yields the empty list.
.PP
.RS
.TP
.B a = w x y z; echo $a(2 3 4 4 3)
prints
.B x y z z y
.RE
.PP
Subscripts may be specified as ranges by separating the range endpoints with
.BR ... " ."
The range operator must be separated from its arguments by spaces.
.PP
Either end of the range may be left unspecified.
.PP
.RS
.TP
.BI $ var "(... 7)"
yields elements 1 through 7 of the list
.TP
.BI $ var "(3 ...)"
yields elements 3 through the end of the list
.RE
.PP
Reversing the endpoints of a range returns the values in reversed order:
.PP
.RS
.B a = s d r a w k c a b
.RE
.RS
.B $a(5 ... 2)
.RE
.PP
yeilds the list
.PP
.RS
.B w a r d
.SS Multiple assignment
A list of variables may be specified on the left side of an assignment.
Parentheses are mandatory around the list of variables.
.PP
Corresponding list elements on the right side are assigned to variables on
the left. If the right side has more elements than there are variables on
the left, the rightmost variable is assigned the list value of the remaining
elements. If there are more variables than list elements, the excess variables
are assigned the empty list.
.PP
Variable names may not be computed or subscripted on the left side of a
multiple assignment.
.SS List length
The length of a list assigned to a variable is given by
.PP
.RS
.BI $# var
.RE
.PP
.SS Flattening
A list may be flattened to a single word using the
.B $^
operator. This returns a word composed of the words of the given list,
with a single space between each pair of words. As with the subscript
operator, this applies only to a variable (not literal) list.
.SS Free carets
Concatenation may be written implicitly (rather than using the
.B ^
operator) in certain situations. If a word is followed by another word,
.BR $ " or " `
without intervening whitespace, then
.B xs
inserts a caret between them.
.SS Pathname expansion
Where a word may be treated as a pathname,
.B xs
expands wildcards.
.PP
.RS
.TP
.B *
matches zero or more characters
.TP
.B ?
matches exactly one character
.TP
.BI [ class ]
matches any of the characters specified by the class, following the same
rules as those for
.BR ed (1),
except that class negation is denoted by
.B ~
since
.B ^
has another interpretation in
.BR xs .
.RE
.PP
The pathname separator,
.BR / ,
is never matched by
.BR * .
The
.B ?
wildcard never matches a dot at the beginning of a pathname component.
.PP
A tilde
.RB ( ~ )
alone or followed by a slash
.RB ( / )
is replaced by the value of
.BR $home .
A tilde followed by a username is replaced with the home directory path
of that user. (See
.BR getpwent (3).)
.PP
A quoted wildcard loses its meaning as a wildcard.
.SS Pattern matching
The pattern matching operator
.RB ( ~ )
returns true when a subject matches any of the given patterns:
.PP
.RS
.BI ~ " subject pattern ..."
.RE
.PP
A subject may be a list. If composed of individual words or expressions,
the subject list must be enclosed by parentheses.
.PP
A pattern is a word which may contain wildcards:
.RS
.TP
.B *
matches zero or more characters
.TP
.B ?
matches exactly one character
.TP
.BI [ class ]
matches any of the characters specified by the class, following the same
rules as those for
.BR ed (1),
except that class negation is denoted by
.B ~
since
.B ^
has another interpretation in
.BR xs .
.RE
.PP
Pattern wildcards are never expanded with pathnames from the filesystem.
.SS Pattern extraction
The pattern extraction operator
.RB ( ~~ )
returns the parts of each subject that match a wildcard in the patterns:
.PP
.RS
.BI ~~ " subject pattern ..."
.RE
.PP
Subjects and patterns are the same as for the pattern matching operator.
.SS Arithmetic substitution
An infix arithmetic expression may be evaluated to produced a single word
representing its value:
.PP
.RS
.BI `( expression )
.RE
.PP
The expression consists of numeric values and the infix operators
.BR + ", " - ", " * ", " / " and " % " (modulus);"
these obey the usual precedence rules.
.PP
A value is either a numeric constant or a variable having a numeric value.
Numbers may be integer or floating-point; the latter are stored with limited
precision (usually six significant digits).
.PP
If an expression involves any floating-point value, the result will be
floating-point.
.PP
Division of integers produces an integer result via truncation. Modulus
behaves as
.BR fmod (3)
if either argument is floating-point.
.PP
An undefined variable (a variable having value
.BR () )
is treated as zero within an arithmetic expression.
.PP
Variables having subscripted or constructed names may not be used in an
arithmetic expression.
.SS Pipes
The standard output of one fragment may be piped to the standard input of
another:
.PP
.RS
.IB fragment1 | fragment2
.RE
.PP
Other file descriptors may be connected:
.PP
.RS
.IB fragment1 |[ fd1 = fd2 ] fragment2
.RE
.PP
The form
.PP
.RS
.IB fragment1 |[ fd1 ] fragment2
.RE
.PP
is identical to
.PP
.RS
.IB fragment2 |[ fd1 =0] fragment2
.RE
.PP
.SS Command substitution
The backquote form creates a list from the standard output of a program
fragment:
.PP
.RS
.BI ` fragment
.RE
.PP
Words are parsed from the standard output using the separators defined by
.BR $ifs .
.PP
This variant backquote form binds
.B $ifs
to the given list of separators:
.PP
.RS
.BI `` " separators fragment"
.RE
.SS Functions
.B Xs
has two forms by which a function is defined:
.PP
.RS
.BI fn " name fragment"
.RE
.PP
and
.PP
.RS
.BI fn- name " = " fragment
.RE
.PP
The former is normally used for top-level and nested definitions; the latter
must be used when binding a function for local use. Because the latter is an
assignment, the spaces around
.B =
are mandatory.
.SS Lambdas
A lambda is an unnamed function. In
.BR xs ,
a lambda is written as a program frament in which the first element may be
a lambda list (see below). A lambda without a lambda list is a lambda with
no arguments.
.SS Lambda list
A lambda list binds names to function arguments. Its form is:
.PP
.RS
.BI | "name ..." |
.RE
.PP
A lambda list may only appear as the first element of a fragment.
.SS Truth values
The values
.BR 0 ", " '' " and " ()
are all treated as true; everything else is false.
.PP
The keywords
.BR true " and " false
are equivalent to
.BR "result 0" " and " "result 1" ,
respectively.
.SS Return values
The value of evaluating a fragment is the return value of the last function
or executable evaluated before leaving the fragment.
.PP
A specific result may be returned by:
.PP
.RS
.BI result " list"
.RE
.SS Logical operators
The following operators apply to truth values:
.PP
.RS
.TP
.IB value1 && value2
True if both
.IR value1 " and " value2
are true.
.TP
.IB value1 || value2
True if
.I value1
is true or if
.I value1
is false and
.I value2
is true.
.TP
.BI ! value
True if
.I value
is false.
.RE
.PP
The
.BR && " and " ||
operators evaluate their arguments from left to right, stopping when the
value of the expression is determined.
.SS Relational operators
Numbers and strings may be compared using the relational operators:
.PP
.RS
.TP
.IB value1 " :lt " value2
True if value1 is less than value2.
.TP
.IB value1 " :le " value2
True if value1 is less than or equal to value2.
.TP
.IB value1 " :gt " value2
True if value1 is greater than value2.
.TP
.IB value1 " :ge " value2
True if value1 is greater than or equal to value2.
.TP
.IB value1 " :eq " value2
True if value1 is equal to value2.
.TP
.IB value1 " :ne " value2
True if value1 is not equal to value2.
.RE
.PP
If either argument is non-numeric, the arguments are compared according to
the current locale's collation order.
.SS Input and output
Input may be redirected from a file to standard input:
.PP
.RS
.BI < "filename fragment"
.RE
.PP
or
.PP
.RS
.IB fragment " <" filename
.RE
.PP
It is an error if the file does not exist or is not readable.
.PP
Output may be redirected from standard output to a file:
.PP
.RS
.IB fragment " >" filename
.RE
.PP
or
.PP
.RS
.BI > "filename fragment"
.RE
.PP
The file is created if it does not exist. If the file already exists, its
contents are replaced. It is an error for the the file to not be writeable.
.PP
Other file descriptors may be specified:
.PP
.RS
.IB "fragment " >[ ofd ] filename
.RE
.PP
and
.PP
.RS
.IB "fragment " <[ ifd ] filename
.RE
A file descriptor may be duplicated using the form:
.PP
.RS
.BI >[ fd1 = fd2 ]
.RE
.PP
This causes output to
.I fd1
to be written instead to
.IR fd2 .
Thus,
.PP
.RS
.IB fragment > file >[2=1] filename
.RE
.PP
causes both standard output and standard error to be written to the same file.
.PP
Other redirection operators have their own semantics:
.PP
.RS
.TP
.BI >> filename
appends to an existing file; the file is created if nonexistent.
.TP
.BI <> filename
opens a file for reading and writing (on standard input unless otherwise
specified).
.TP
.BI <>> filename
opens a file for reading and appending (on standard input unless otherwise
specified).
.TP
.BI >< filename
truncates a file and opens it for reading and writing (on standard output
unless otherwise specified).
.TP
.BI >>< filename
opens a files for reading and appending (on standard output unless otherwise
specified).
.RE
.PP
An open file descriptor is closed using this form:
.PP
.RS
.BI >[ fd =]
.RE
.PP
File descriptors must be integer constants.
.SS Literal input
Multiple lines of input may be read from a script using a "here document":
.PP
.RS
.IB fragment << eof-marker
.RE
.PP
or
.PP
.RS
.IB fragment <<' eof-marker '
.RE
.PP
The
.I eof-marker
is a word which must appear immediately following the final newline of textual
data taken as input. The first form (with the unquoted
.IR eof-marker )
replaces variables within the textual data. (Only simple variables; subscripts
and constructed names are not allowed.) A
.B $
can be emitted literally by writing
.BR $$ .
To emit the value of a variable followed immediately by a literal word, write:
.BI $ var ^ word.
.PP
The second form (with the quoted
.IR eof-marker )
copies the textual data without substitution of any kind.
.PP
Text may also provide the content of a readable file via a "here string":
.PP
.RS
.BI <<<' text '
.RE
.PP
The
.I text
may span lines. No substitution is performed within a here string.
.PP
A here string may also be created using a variable for the content, like
.BI <<<$ var
.RI .
.SS Process substitution
.PP
Process substitution allows for the output of a command to be read from a
file descriptor or for data written to a file descriptor to be read by a
command, using the forms:
.PP
.RS
.BI <{ command+ }
.RE
.PP
and
.PP
.RS
.BI >{ command+ }
.RE
.PP
The files created by process substitution may be implemented using pipes,
which are not seekable.
.PP
Multiple
.IR command s
may appear within the braces.
.PP
Note that the braces are an essential part of this syntax; these are not
.BI > fragment
and
.BI < fragment.
.SS Local variables
Local variables exist only during execution of their binding form:
.PP
.RS
.BI "local (" "binding ..." ) " fragment"
.RE
.PP
where
.B binding
is either
.IB name " = " value
or just name (and value is taken as
.BR () ).
.PP
While bound by
.BR local ,
variables are accessible within the environment.
.SS Lexical variables
Lexical variables are bound by the form:
.PP
.RS
.BI "let (" "binding ..." ) " fragment"
.RE
.PP
where
.B binding
is either
.IB name " = " value
or just name (and value is taken as
.BR () ).
.PP
A lexical variable is accessible to all code lexically enclosed by the
binding form. Furthermore, a lexical variable persists across executions
of a function which is defined within the
.B let
form. A lexical binding is never written to the environment.
.SS Conditionals
.B Xs
has two main conditional forms:
.PP
.RS
.BI if " condition fragment " else " fragment"
.RE
.PP
where
.I condition
is a boolean expression and the
.B else
branch is optional, and
.PP
.RS
.BI switch " var cases"
.RE
.PP
where
.I cases
is a list of
.IR "word fragment" ,
each representing the code to be executed for a specific value of
.IR var ,
followed by a
.I fragment
to be executed when none of the
.IR word s
match
.IR var .
.SS Loops
.B Xs
has three main looping forms:
.PP
.RS
.BI while " condition fragment"
.RE
.RS
.BI until " condition fragment"
.RE
.RS
.BI for " vars-and-values fragment"
.RE
.PP
The
.B while
form executes
.I fragment
while
.I condition
is true.
.PP
The
.B until
form executes
.I fragment
until
.I condition
is false.
.PP
The
.B for
form executes
.I fragment
with variables bound to consecutive values in
.IR vars-and-values ,
which is a sequence of one or more
.I var list
forms separated by
.BR ; .
This continues until the longest list is exhausted; shorter lists are
implicitly padded with
.B ()
to match the length of the longest list.
.SS Settors
A settor function is a variable of the form
.BI set- var
.PP
When
.I var
is assigned,
.BI set- var
is called as a function, passing the value to be assigned.
.B $0
is bound to the name of the variable being assigned. The result of
the settor function is used as the assignment's value.
.PP
A settor is never invoked on a lexical variable.
.SS Exceptions
Exceptions in
.B xs
are used for non-lexical control transfer. An exception is passed up the
call chain to the most recently established catcher. The catcher may handle
the exception, retry the code which caused the exception or pass the
exception to the next catcher.
.PP
An exception is a list. The first word denotes the exception type, one of:
.PP
.RS
.TP
.B eof
raised by the
.B xs
parser at end of input.
.TP
.B error
where the following words are the source (typically a descriptive name
such as the name of the function which signalled the error) and a message.
.B xs
provides a last-resort catcher to print the message and restart the top loop.
.TP
.B exit
where the next word is an optional numeric return code (default: 0). This
exception, when caught by
.BR xs ,
exits the shell with the given return code.
.TP
.B retry
when raised by a catcher, causes the body of the
.B catch
form to run again. Note that the catcher must have done something to clear
the cause of the exception; otherwise
.B retry
will cause an infinite loop.
.RE
.PP
The
.B catch
form executes its body in the context of a catcher:
.PP
.RS
.BI catch " catcher body"
.RE
.PP
The
.IR catcher " and " body
are fragments.
.SH BUILTIN VARIABLES
These dynamic variables form a part of the programming interface to
.BR xs .
.TP
.B *
The arguments passed to
.BR xs .
Individual arguments may be referenced via subscripts or as
.BR $1 ", " $2 ", " $3 ", etc."
.TP
.B 0
At the top level, this variable
.RB "(i.e. " $0 )
is the value of
.BR xs 's
argv[0] or the name of a sourced file. Within an executing function,
the name of the function.
.TP
.B apid
The ID of the most recently started background process.
.TP
.B history
The pathname of the file to which
.B xs
appends commands read by the toplevel loop. This may be left undefined.
.TP
.B home
The path to the current user's home directory.
.BR $home " and " $HOME
are aliased to each other.
.TP
.B ifs
The input field separator, used by backquote
.RB ( ` )
to split command output into words. The initial value is the list
.RS
.I "space tab newline"
.RE
.TP
.B max-eval-depth
Sets an upper bound on the size of the interpreter's evaluation stack.
.TP
.B noexport
A list of dynamic variable names which
.B xs
will not export to the environment.
.TP
.B path
A list of directories to be searched for executable programs. The current
directory is denoted by the empty word
.RB ( '' ).
.BR $path " and " $PATH
are aliased to each other, with appropriate syntactic adjustments.
.TP
.B pid
The process ID of the running
.BR xs .
.TP
.B prompt
.B $prompt(1)
is printed before reading a command.
.B $prompt(2)
is printed before reading a continuation line.
The default,
.BR "';' ''" ,
facilitates copy-paste from a terminal session into a script file.
.B $prompt
may contain ANSI terminal control characters and sequences.
.TP
.B signals
A list of signals trapped by
.BR xs .
For each signal name on
.BR $signals ,
.B xs
raises a correspondingly-named exception upon trapping the signal.
A signal's disposition is determined by an optional prefix to its name:
.PP
.RS
.TP
.B -
ignore the signal, here and in child processes
.TP
.B /
ignore the signal here, but take its default behavior in child processes
.TP
.BI . " (only for sigint)"
perform normal processing (i.e. print an extra newline)
.TP
.I none
default behavior
.PP
The initial value of
.B $signals
is
.RS
.RI ".sigint /sigquit /sigterm"
.RE
plus any signals ignored (/) when
.B xs
started.
.RE
.PP
.B Xs
maintains
.B $SHLVL
for interoperability with other shells.
.SH BUILTIN COMMANDS
TBCL
.SH HOOKS
TBCL
.SH UTILITIES
TBCL
.SH PRIMITIVES
TBCL
.SH CANONICAL FORM
TBCL
.SH EDITING
Input editing is provided by
.BR readline (3)
and configured by
.BR ~/.inputrc .
.SH FILES
These files are read and interpreted when
.B xs
starts:
.RS
.TP
.B ~/xsrc
is read when
.B xs
is a login shell.
.TP
.B ~/xsin
is read when
.B xs
is an interactive shell.
.RE
.PP
When both
.BR ~/.xsrc " and " ~/.xsin
are read,
.B ~/.xsrc
is read first.
.PP
Additional documentation and sample codes is installed in
.IB prefix /share/doc/xs
.RI .
.I Prefix
is typically
.BR /usr " or " /usr/local .
.SH BUGS
The interpreter does not implement tail recursion.
.PP
Returning a function from a function (i.e. an "upward funarg") does not work.
.PP
Dead code needs to be pruned, particularly w.r.t. support for non-Linux
platforms.
.PP
Please report issues at <https://github.com/TieDyedDevil/XS>.
.SH SOURCE
The
.BR git (1)
source repository is at <https://github.com/TieDyedDevil/XS>.
.SH PACKAGES
.B Xs
is packaged for Fedora. The
.B xs
1.1 release first appeared in Fedora 27.
.SH AUTHORS
.B Xs
1.1 and later is maintained by David B. Lamkins <david@lamkins.net>.
.PP
.B Xs
1.0 (self-reporting as 0.1) was maintained by Frederic Koehler
<fkfire@gmail.com>. This is where the translation to C++ occurred.
.PP
.B Es
to 0.9-beta was maintained by Soren Dayton <csdayton@cs.uchicago.edu>.
.B Es
up through 0.84 was maintained by Paul Haar <haahr@adobe.com> and
Byron Rakitzis <byron@netapp.com>.
.PP
The
.B rc
shell for Plan 9 was written at Bell Labs by Tom Duff. The Unix port was
written by Byron Rakitizis and maintained by Toby Goodwin.
See <http://tobold.org/article/rc>.
.SH SEE ALSO
TBCL
